from estnltk import LambdaAttribute
from estnltk.core import rel_path
from estnltk.converters import text_to_dict, dict_to_text
from estnltk.converters.conll_importer import conll_to_text
from estnltk.converters.conll_importer import add_layer_from_conll


text_dict = {
 'text': 'Iga üheksas kroon tuli salapärastelt isikutelt . See oli rohkem kui 10 protsenti kogu Hansapanka paigutatud rahast .',
 'meta': {},
 'layers': [{'name': 'conll_syntax',
   'attributes': ('id',
    'lemma',
    'upostag',
    'xpostag',
    'feats',
    'head',
    'deprel',
    'deps',
    'misc',
    'parent_span',
    'children',
    'parent_deprel'),
   'parent': None,
   '_base': 'conll_syntax',
   'enveloping': None,
   'ambiguous': False,
   'spans': [{'id': 1,
     'lemma': 'iga',
     'upostag': 'P',
     'xpostag': 'P',
     'feats': 'det|sg|nom',
     'head': 2,
     'deprel': '@NN>',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[1]'),
     'children': '()',
     'parent_deprel': '@AN>',
     'start': 0,
     'end': 3},
    {'id': 2,
     'lemma': 'üheksas',
     'upostag': 'N',
     'xpostag': 'A',
     'feats': 'ord|sg|nom|l',
     'head': 3,
     'deprel': '@AN>',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[2]'),
     'children': '(Span(start=0, end=3, layer=None),)',
     'parent_deprel': '@SUBJ',
     'start': 4,
     'end': 11},
    {'id': 3,
     'lemma': 'kroon',
     'upostag': 'S',
     'xpostag': 'S',
     'feats': 'sg|nom',
     'head': 4,
     'deprel': '@SUBJ',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[3]'),
     'children': '(Span(start=4, end=11, layer=None),)',
     'parent_deprel': 'ROOT',
     'start': 12,
     'end': 17},
    {'id': 4,
     'lemma': 'tule',
     'upostag': 'V',
     'xpostag': 'V',
     'feats': 'indic|impf|ps3|sg',
     'head': 0,
     'deprel': 'ROOT',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[-1]'),
     'children': '(Span(start=12, end=17, layer=None), Span(start=37, end=46, layer=None))',
     'parent_deprel': None,
     'start': 18,
     'end': 22},
    {'id': 5,
     'lemma': 'sala_pärane',
     'upostag': 'A',
     'xpostag': 'A',
     'feats': 'pl|abl',
     'head': 6,
     'deprel': '@AN>',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[5]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 23,
     'end': 36},
    {'id': 6,
     'lemma': 'isik',
     'upostag': 'S',
     'xpostag': 'S',
     'feats': 'pl|abl',
     'head': 4,
     'deprel': '@ADVL',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[3]'),
     'children': '(Span(start=23, end=36, layer=None), Span(start=47, end=48, layer=None))',
     'parent_deprel': 'ROOT',
     'start': 37,
     'end': 46},
    {'id': 7,
     'lemma': '.',
     'upostag': 'Z',
     'xpostag': 'Z',
     'feats': 'Fst',
     'head': 6,
     'deprel': '@Punc',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[5]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 47,
     'end': 48},
    {'id': 1,
     'lemma': 'see',
     'upostag': 'P',
     'xpostag': 'P',
     'feats': 'dem|sg|nom',
     'head': 2,
     'deprel': '@SUBJ',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[1]'),
     'children': '()',
     'parent_deprel': 'ROOT',
     'start': 49,
     'end': 52},
    {'id': 2,
     'lemma': 'ole',
     'upostag': 'V',
     'xpostag': 'V',
     'feats': 'indic|impf|ps3|sg',
     'head': 0,
     'deprel': 'ROOT',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[-1]'),
     'children': '(Span(start=49, end=52, layer=None), Span(start=57, end=63, layer=None))',
     'parent_deprel': None,
     'start': 53,
     'end': 56},
    {'id': 3,
     'lemma': 'rohkem',
     'upostag': 'D',
     'xpostag': 'D',
     'feats': None,
     'head': 2,
     'deprel': '@OBJ',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[1]'),
     'children': '(Span(start=68, end=70, layer=None),)',
     'parent_deprel': 'ROOT',
     'start': 57,
     'end': 63},
    {'id': 4,
     'lemma': 'kui',
     'upostag': 'J',
     'xpostag': 'Jc',
     'feats': None,
     'head': 5,
     'deprel': '@J',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[4]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 64,
     'end': 67},
    {'id': 5,
     'lemma': '10',
     'upostag': 'N',
     'xpostag': 'N',
     'feats': 'card|sg|nom',
     'head': 3,
     'deprel': '@ADVL',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[2]'),
     'children': '(Span(start=64, end=67, layer=None), Span(start=71, end=80, layer=None), Span(start=108, end=114, layer=None))',
     'parent_deprel': '@OBJ',
     'start': 68,
     'end': 70},
    {'id': 6,
     'lemma': 'protsent',
     'upostag': 'S',
     'xpostag': 'S',
     'feats': 'sg|part',
     'head': 5,
     'deprel': '@<Q',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[4]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 71,
     'end': 80},
    {'id': 7,
     'lemma': 'kogu',
     'upostag': 'A',
     'xpostag': 'A',
     'feats': None,
     'head': 10,
     'deprel': '@AN>',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[9]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 81,
     'end': 85},
    {'id': 8,
     'lemma': 'Hansa_pank',
     'upostag': 'S',
     'xpostag': 'H',
     'feats': 'sg|adit',
     'head': 9,
     'deprel': '@ADVL',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[8]'),
     'children': '()',
     'parent_deprel': '@AN>',
     'start': 86,
     'end': 96},
    {'id': 9,
     'lemma': 'paiguta=tud',
     'upostag': 'A',
     'xpostag': 'A',
     'feats': 'partic',
     'head': 10,
     'deprel': '@AN>',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[9]'),
     'children': '(Span(start=86, end=96, layer=None),)',
     'parent_deprel': '@ADVL',
     'start': 97,
     'end': 107},
    {'id': 10,
     'lemma': 'raha',
     'upostag': 'S',
     'xpostag': 'S',
     'feats': 'sg|el',
     'head': 5,
     'deprel': '@ADVL',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[4]'),
     'children': '(Span(start=81, end=85, layer=None), Span(start=97, end=107, layer=None), Span(start=115, end=116, layer=None))',
     'parent_deprel': '@ADVL',
     'start': 108,
     'end': 114},
    {'id': 11,
     'lemma': '.',
     'upostag': 'Z',
     'xpostag': 'Z',
     'feats': 'Fst',
     'head': 10,
     'deprel': '@Punc',
     'deps': None,
     'misc': None,
     'parent_span': LambdaAttribute('lambda a: a.layer[9]'),
     'children': '()',
     'parent_deprel': '@ADVL',
     'start': 115,
     'end': 116}]},
  {'name': 'words',
   'attributes': (),
   'parent': None,
   '_base': 'words',
   'enveloping': None,
   'ambiguous': False,
   'spans': [{'start': 0, 'end': 3},
    {'start': 4, 'end': 11},
    {'start': 12, 'end': 17},
    {'start': 18, 'end': 22},
    {'start': 23, 'end': 36},
    {'start': 37, 'end': 46},
    {'start': 47, 'end': 48},
    {'start': 49, 'end': 52},
    {'start': 53, 'end': 56},
    {'start': 57, 'end': 63},
    {'start': 64, 'end': 67},
    {'start': 68, 'end': 70},
    {'start': 71, 'end': 80},
    {'start': 81, 'end': 85},
    {'start': 86, 'end': 96},
    {'start': 97, 'end': 107},
    {'start': 108, 'end': 114},
    {'start': 115, 'end': 116}]}]}


def test_conll_to_text():
    file = rel_path('tests/test_converters/test_conll_importer.conll')
    result = text_to_dict(conll_to_text(file))

    for span in result['layers'][0]['spans']:
        span['children'] = str(span['children'])

    assert text_dict == result


def _test_add_layer_from_conll():
    file = rel_path('tests/test_converters/test_conll_importer.conll')

    text_dict_0 = {
        'text': 'Iga üheksas kroon tuli salapärastelt isikutelt . See oli rohkem kui 10 protsenti kogu Hansapanka paigutatud rahast .',
        'meta': {},
        'layers': [{'name': 'words',
                    'attributes': (),
                    'parent': None,
                    '_base': 'words',
                    'enveloping': None,
                    'ambiguous': False,
                    'spans': [{'start': 0, 'end': 3},
                              {'start': 4, 'end': 11},
                              {'start': 12, 'end': 17},
                              {'start': 18, 'end': 22},
                              {'start': 23, 'end': 36},
                              {'start': 37, 'end': 46},
                              {'start': 47, 'end': 48},
                              {'start': 49, 'end': 52},
                              {'start': 53, 'end': 56},
                              {'start': 57, 'end': 63},
                              {'start': 64, 'end': 67},
                              {'start': 68, 'end': 70},
                              {'start': 71, 'end': 80},
                              {'start': 81, 'end': 85},
                              {'start': 86, 'end': 96},
                              {'start': 97, 'end': 107},
                              {'start': 108, 'end': 114},
                              {'start': 115, 'end': 116}]}]}
    text_0 = dict_to_text(text_dict_0)
    add_layer_from_conll(file, text_0, 'conll_syntax')

    result = text_to_dict(text_0)

    for span in result['layers'][0]['spans']:
        span['children'] = str(span['children'])

    assert result == text_dict
