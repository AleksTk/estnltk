from estnltk import Text
from estnltk.converters import layer_to_dict
from estnltk.taggers import VislTagger

visl_dict = {'_base': 'words',
             'ambiguous': True,
             'attributes': ('id',
                            'lemma',
                            'ending',
                            'partofspeech',
                            'subtype',
                            'mood',
                            'tense',
                            'voice',
                            'person',
                            'inf_form',
                            'number',
                            'case',
                            'polarity',
                            'number_format',
                            'capitalized',
                            'finiteness',
                            'subcat',
                            'clause_boundary',
                            'deprel',
                            'head'),
             'enveloping': None,
             'name': 'visl',
             'parent': 'words',
             'spans': [[{'_index_': 0,
                         'capitalized': 'cap',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 4,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '3',
                         'id': '1',
                         'inf_form': '_',
                         'lemma': 'juba',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'D',
                         'person': '_',
                         'polarity': '_',
                         'start': 0,
                         'subcat': '_',
                         'subtype': '_',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 1,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '@FMV',
                         'end': 10,
                         'ending': 'b',
                         'finiteness': '_',
                         'head': '0',
                         'id': '2',
                         'inf_form': '_',
                         'lemma': 'taht',
                         'mood': 'indic',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'V',
                         'person': 'ps3',
                         'polarity': 'af',
                         'start': 5,
                         'subcat': '_',
                         'subtype': 'main',
                         'tense': 'pres',
                         'voice': 'ps'}],
                       [{'_index_': 2,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '@OBJ',
                         'end': 16,
                         'ending': 'da',
                         'finiteness': '_',
                         'head': '2',
                         'id': '3',
                         'inf_form': 'inf',
                         'lemma': 'saa',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'V',
                         'person': '_',
                         'polarity': '_',
                         'start': 11,
                         'subcat': '_',
                         'subtype': 'main',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 3,
                         'capitalized': '_',
                         'case': 'tr',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 25,
                         'ending': 'ks',
                         'finiteness': '_',
                         'head': '3',
                         'id': '4',
                         'inf_form': '_',
                         'lemma': 'pagar',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'S',
                         'person': '_',
                         'polarity': '_',
                         'start': 17,
                         'subcat': '_',
                         'subtype': 'com',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 4,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': 'CLB',
                         'deprel': '_',
                         'end': 26,
                         'ending': '_',
                         'finiteness': '_',
                         'head': '5',
                         'id': '5',
                         'inf_form': '_',
                         'lemma': '!',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'Z',
                         'person': '_',
                         'polarity': '_',
                         'start': 25,
                         'subcat': '_',
                         'subtype': 'Exc',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 5,
                         'capitalized': 'cap',
                         'case': 'nom',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 30,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '3',
                         'id': '1',
                         'inf_form': '_',
                         'lemma': 'ise',
                         'mood': '_',
                         'number': 'pl',
                         'number_format': '_',
                         'partofspeech': 'P',
                         'person': '_',
                         'polarity': '_',
                         'start': 27,
                         'subcat': '_',
                         'subtype': ['pos', 'det', 'refl'],
                         'tense': '_',
                         'voice': '_'},
                        {'_index_': 5,
                         'capitalized': 'cap',
                         'case': 'nom',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 30,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '3',
                         'id': '1',
                         'inf_form': '_',
                         'lemma': 'ise',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'P',
                         'person': '_',
                         'polarity': '_',
                         'start': 27,
                         'subcat': '_',
                         'subtype': ['pos', 'det', 'refl'],
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 6,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 36,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '3',
                         'id': '2',
                         'inf_form': '_',
                         'lemma': 'alles',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'D',
                         'person': '_',
                         'polarity': '_',
                         'start': 31,
                         'subcat': '_',
                         'subtype': '_',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 7,
                         'capitalized': '_',
                         'case': 'gen',
                         'clause_boundary': '_',
                         'deprel': '@NN>',
                         'end': 40,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '0',
                         'id': '3',
                         'inf_form': '_',
                         'lemma': 'tee',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'S',
                         'person': '_',
                         'polarity': '_',
                         'start': 37,
                         'subcat': '_',
                         'subtype': 'com',
                         'tense': '_',
                         'voice': '_'},
                        {'_index_': 7,
                         'capitalized': '_',
                         'case': 'gen',
                         'clause_boundary': '_',
                         'deprel': '@OBJ',
                         'end': 40,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '0',
                         'id': '3',
                         'inf_form': '_',
                         'lemma': 'tee',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'S',
                         'person': '_',
                         'polarity': '_',
                         'start': 37,
                         'subcat': '_',
                         'subtype': 'com',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 8,
                         'capitalized': '_',
                         'case': 'ad',
                         'clause_boundary': '_',
                         'deprel': '@AN>',
                         'end': 49,
                         'ending': 'l',
                         'finiteness': '_',
                         'head': '5',
                         'id': '4',
                         'inf_form': '_',
                         'lemma': 'esimene',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': 'l',
                         'partofspeech': 'N',
                         'person': '_',
                         'polarity': '_',
                         'start': 41,
                         'subcat': '_',
                         'subtype': 'ord',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 9,
                         'capitalized': '_',
                         'case': 'ad',
                         'clause_boundary': '_',
                         'deprel': ['@<NN', '@ADVL'],
                         'end': 56,
                         'ending': 'l',
                         'finiteness': '_',
                         'head': '3',
                         'id': '5',
                         'inf_form': '_',
                         'lemma': 'pool',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'S',
                         'person': '_',
                         'polarity': '_',
                         'start': 50,
                         'subcat': '_',
                         'subtype': 'com',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 10,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '_',
                         'end': 58,
                         'ending': '_',
                         'finiteness': '_',
                         'head': '6',
                         'id': '6',
                         'inf_form': '_',
                         'lemma': ',',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'Z',
                         'person': '_',
                         'polarity': '_',
                         'start': 57,
                         'subcat': '_',
                         'subtype': 'Com',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 11,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 64,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '3',
                         'id': '7',
                         'inf_form': '_',
                         'lemma': 'vaevu',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'D',
                         'person': '_',
                         'polarity': '_',
                         'start': 59,
                         'subcat': '_',
                         'subtype': '_',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 12,
                         'capitalized': '_',
                         'case': 'nom',
                         'clause_boundary': '_',
                         'deprel': '@ADVL',
                         'end': 82,
                         'ending': '0',
                         'finiteness': '_',
                         'head': '5',
                         'id': '8',
                         'inf_form': '_',
                         'lemma': 'kolme_kümne_kolmene',
                         'mood': '_',
                         'number': 'sg',
                         'number_format': '_',
                         'partofspeech': 'A',
                         'person': '_',
                         'polarity': '_',
                         'start': 65,
                         'subcat': '_',
                         'subtype': 'pos',
                         'tense': '_',
                         'voice': '_'}],
                       [{'_index_': 13,
                         'capitalized': '_',
                         'case': '_',
                         'clause_boundary': 'CLB',
                         'deprel': '_',
                         'end': 84,
                         'ending': '_',
                         'finiteness': '_',
                         'head': '9',
                         'id': '9',
                         'inf_form': '_',
                         'lemma': '.',
                         'mood': '_',
                         'number': '_',
                         'number_format': '_',
                         'partofspeech': 'Z',
                         'person': '_',
                         'polarity': '_',
                         'start': 83,
                         'subcat': '_',
                         'subtype': 'Fst',
                         'tense': '_',
                         'voice': '_'}]]}


def test_visl_tagger():
    text = Text('Juba tahab saada pagariks! Ise alles tee esimesel poolel , vaevu kolmekümnekolmene .').tag_layer(
        ['morph_extended'])

    tagger = VislTagger()
    tagger.tag(text)
    result = layer_to_dict(layer=text.visl, text=text)
    assert visl_dict == result
