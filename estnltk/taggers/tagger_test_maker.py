from pprint import pformat
from typing import List
from os.path import exists, split

from estnltk.text import Text
from estnltk.converters import export_dict


template = """# this test file is automatically generated by make_test_file method in tagger_test_maker.py

from estnltk.converters import import_dict
{tagger_creation}
input_text_dict = \\
{text_dict_str}

expected_text_dict = \\
{expected_text_dict}


expected_layer_text = {expected_layer_text}

expected_text = import_dict(expected_text_dict)

input_text = import_dict(input_text_dict)
result = tagger.tag(input_text)


def test_basic():
    assert expected_layer_text == result[tagger.output_layer].text


def test_complete():
    diff = expected_text.diff(result)
    assert not diff, diff
"""

def make_tagger_test(tagger_creation: str,
                     text: Text,
                     expected_layer_text: List[str],
                     test_file: str,
                     overwrite: bool=False):
    scope = {}
    exec(tagger_creation, scope)
    tagger = scope['tagger']

    if not overwrite and exists(test_file):
        print("File '" + split(test_file)[-1] + "' already exists. Use 'overwrite=True' to overwrite.")
        return
    text_dict_str = pformat(export_dict(text))
    expected_text = tagger.tag(text)
    expected_layer_text = list(expected_layer_text)
    assert expected_layer_text == expected_text[tagger.output_layer].text,\
        str(expected_layer_text) + ' != ' + str(expected_text[tagger.output_layer].text)
    expected_text_dict = pformat(export_dict(expected_text))
    file_contents = template.format(text_dict_str=text_dict_str,
                                    tagger_creation=tagger_creation,
                                    expected_text_dict=expected_text_dict,
                                    expected_layer_text=expected_layer_text)
    with open(test_file, 'w') as out_f:
        out_f.write(file_contents)
        print("Created '" + split(test_file)[-1] + "'.")
